{"id":"ejercicios/prototype.html","dependencies":[{"name":"/home/memobrown/Desktop/JavaScript-profesional/package.json","includedInParent":true,"mtime":1600183546321}],"generated":{"html":"<html>\n  <head>\n    <title>Prototype</title>\n  </head>\n\n  <body>\n    <a href=\"/ejercicios/\">Go back</a>\n    <p><em>Abre la consola</em></p>\n\n    <script>// Un objeto común y corriente\n// const batman = {\n//   name: 'Batman'\n// }\n// batman.saludar = function () {\n//   console.log(`Hola soy ${this.name}`)\n// }\n// batman.saludar()\n// const greenLantern = {\n//   name: 'Green Lantern'\n// }\n// greenLantern.saludar = function () {\n//   console.log(`Hola soy ${this.name}`)\n// }\n// greenLantern.saludar()\n// Seamos un poco más eficientes\n// function Hero(name){\n//   const heroes = {\n//     name: name\n//   }\n//   heroes.saludar = function(){\n//     console.log(`Hola soy ${this.name}`)\n//   };\n//   return heroes\n// }\n// const batman = Hero(\"Batman\")\n// batman.saludar();\n// const greenLantern = Hero(\"Green Lantern\")\n// greenLantern.saludar();\n// Aun podemos mejorar más y evitar tener que crear la misma función cada vez\n// const heroMethods = {\n//   saludar: function(){\n//     console.log(`Soy ${this.name}`)\n//   },\n// };\n// function Hero(name){\n//   const heroes = {\n//     name: name\n//   }\n//   heroes.saludar = heroMethods.saludar;\n//   return heroes\n// }\n// const batman = Hero(\"Batman\")\n// batman.saludar();\n// const greenLantern = Hero(\"Green Lantern\")\n// greenLantern.saludar();\n// Object.create\n// const newObjetc = Objetc.create(objeto)\n// const heroMethods = {\n//   saludar: function(){\n//     console.log(`Soy ${this.name}!`)\n//   },\n// };\n// function Hero(name){\n//   const heroes = Object.create(heroMethods);\n//   heroes.name = name;\n//   return heroes\n// }\n// const batman = Hero(\"Batman\")\n// batman.saludar();\n// const greenLantern = Hero(\"Green Lantern\")\n// greenLantern.saludar();\n// Los métodos de hero dentro de Hero\n// function Hero(name){\n//   const heroes = Object.create(Hero.prototype);\n//   heroes.name = name;\n//   return heroes\n// }\n// Hero.prototype.saludar = function(){\n//     console.log(`Soy ${this.name}!`)\n//   };\n// const batman = Hero(\"Batman\")\n// batman.saludar();\n// const greenLantern = Hero(\"Green Lantern\")\n// greenLantern.saludar();\n// new es un atajo (azucar sintactica) para llevar Hero.prototype al objeto que estamos creando\nfunction Hero(name) {\n  this.name = name;\n}\n\nHero.prototype.saludar = function () {\n  console.log(\"New: \".concat(this.name, \"!\"));\n};\n\nvar batman = new Hero(\"Batman\");\nbatman.saludar();\nvar greenLantern = new Hero(\"Green Lantern\");\ngreenLantern.saludar();</script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"a1c75facc7c1159ec1511b4e830d37f8","cacheData":{"env":{}}}