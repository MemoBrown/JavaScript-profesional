{"id":"ejercicios/call-apply-bind.html","dependencies":[{"name":"/home/memobrown/Desktop/JavaScript-profesional/package.json","includedInParent":true,"mtime":1600183546321}],"generated":{"html":"<html>\n  <head>\n    <title>\n      Function.prototype.call, Function.prototype.apply, Function.prototype.bind\n    </title>\n  </head>\n\n  <body>\n    <a href=\"/ejercicios/\">Go back</a>\n    <p><em>Abre la consola</em></p>\n\n    <ul>\n      <li><button class=\"call-to-action\">Aprender</button></li>\n      <li><button class=\"call-to-action\">Aprender Más</button></li>\n      <li><button class=\"call-to-action\">¡Nunca parar de Aprender!</button></li>\n    </ul>\n\n    <script>// Establece `this` usando `call`\nfunction sayHi() {\n  console.log(\"Hola soy \".concat(this.name, \" \").concat(this.lastName));\n}\n\nvar memo = {\n  name: 'Guillermo',\n  lastName: 'Moreno'\n};\nsayHi.call(memo); // Establece `this` usando `call` y pasar argumentos a la función\n\nfunction walk(metros, direccion) {\n  console.log(\"\".concat(this.name, \" camina \").concat(metros, \" metros hacia \").concat(direccion, \".\"));\n}\n\nwalk.call(memo, 400, \"norte\"); // Establece `this` usando `apply` y pasar argumentos a la función\n// walk.apply(memo, [800, \"noreste\"])\n\nvar values = [800, \"noreste\"];\nwalk.apply(memo, values);\n/*\nCall - comma\nApply - arreglo\n*/\n// Establecer `this` en una nueva función usando `bind`\n\nvar sergio = {\n  name: 'Sergio',\n  lastName: 'Mendez'\n};\nvar sergioSayHi = sayHi.bind(sergio);\nsergioSayHi();\nvar sergioCamina = walk.bind(sergio, 2000, \"sur\");\nsergioCamina(); // Cuándo es útil usar uno de estos métodos\n\nvar buttons = document.getElementsByClassName('call-to-action'); //NodeList\n\nArray.prototype.forEach.call(buttons, function (button) {\n  button.onclick = function () {\n    return alert('Nunca pares de aprender');\n  };\n});</script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"07e07ff2956bd280e9f7bf8b2a61f9a0","cacheData":{"env":{}}}